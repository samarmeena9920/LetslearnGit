#include <iostream>
#include <vector>

using namespace std;

// Function to check if it's safe to assign color c to vertex v
bool isSafe(vector<vector<int>>& graph, vector<int>& color, int v, int c) {
    for (int i = 0; i < graph.size(); i++) {
        if (graph[v][i] && c == color[i]) {
            return false;
        }
    }
    return true;
}

// Function to solve graph coloring problem using backtracking
bool graphColoringUtil(vector<vector<int>>& graph, vector<int>& color, int v, int numColors) {
    if (v == graph.size()) {
        return true;
    }

    for (int c = 1; c <= numColors; c++) {
        if (isSafe(graph, color, v, c)) {
            color[v] = c;
            if (graphColoringUtil(graph, color, v + 1, numColors)) {
                return true;
            }
            color[v] = 0;
        }
    }
    return false;
}

// Main function to solve graph coloring problem
void graphColoring(vector<vector<int>>& graph, int numColors) {
    vector<int> color(graph.size(), 0);

    if (graphColoringUtil(graph, color, 0, numColors)) {
        cout << "Graph can be colored with " << numColors << " colors.\n";
        cout << "Color assignment for each vertex:\n";
        for (int i = 0; i < graph.size(); i++) {
            cout << "Vertex " << i << " -> Color " << color[i] << endl;
        }
    } else {
        cout << "Graph cannot be colored with " << numColors << " colors.\n";
    }
}

// Main function
int main() {
    // Example graph represented as an adjacency matrix
    vector<vector<int>> graph = {
        {0, 1, 1, 1},
        {1, 0, 1, 0},
        {1, 1, 0, 1},
        {1, 0, 1, 0}
    };

    int numColors = 3; // Number of colors

    graphColoring(graph, numColors);

    return 0;
}

